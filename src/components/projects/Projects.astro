---
import DemoImageInventory from "../../assets/projects/inventory.png";
import timekeeping from "../../assets/projects/timekeeping.png";
import greenCycle from "../../assets/projects/greencycle.png";
import fairWrite from "../../assets/projects/fairwrite.png";
import ProjectCard from "./ProjectCard.astro";

interface ProjectItem {
        title: string;
        description: string;
        stack: string[];
        repo?: string;
        demo?: string;
        year?: string;
        image?: ImageMetadata;
        imageAlt?: string;
}

// TODO: Move to separate data file / CMS later
const projects: ProjectItem[] = [
        {
                title: "Paysera Timekeeping System",
                description:
                        "Internship at FiveTwenty: our team built a timekeeping platform. I mainly contributed to the backend, including role-based access control, audit logging, API design, performance tuning, and automated tests.",
                stack: [
                        "React",
                        "ShadCN",
                        "Express",
                        "Prisma",
                        "PostgreSQL",
                        "TypeScript",
                        "Docker",
                        "Jest",
                        "Supertest",
                        "DigitalOcean",
                ],
                year: "2024 – 2025",
                image: timekeeping,
                imageAlt: "image of paysera timekeeping system",
        },
        {
                title: "Fair Write (Gender Fair Revision)",
                description:
                        "Group thesis project: my role involved backend and NLP development, where I built REST APIs and integrated pipelines to detect biased terms and suggest inclusive alternatives in real time.",
                stack: [
                        "Svelte",
                        "Tailwind",
                        "Prosemirror",
                        "FastAPI",
                        "LanguageTool",
                        "spaCy",
                ],
                year: "2024 – 2025",
                repo: "https://github.com/Fair-Write",
                demo: "https://fairwrite.netlify.app/",
                image: fairWrite,
                imageAlt: "image of fair write a gender fair revision web application",
        },
        {
                title: "Ajapco Sales & Inventory System",
                description:
                        "Freelance project developed a sales and inventory management system for selling japanese sweets.",
                stack: ["React", "Node.js", "Express", "MySQL"],
                year: "2023",
                repo: "https://github.com/pangilinanervin22/inventory_react",
                demo: "https://pangilinanervin22.github.io/inventory_react/",
                image: DemoImageInventory,
                imageAlt: "image of ajapco sales and inventory system",
        },
        {
                title: "GreenCycle Mobile App",
                description:
                        "Freelance project built online‑first backend logic with offline support for a recycling app  and tested data sync between cloud and local storage across Android/iOS.",
                stack: ["React Native", "Expo", "Supabase", "TypeScript"],
                year: "2025",
                repo: "https://github.com/pangilinanervin22/GreenCycle",
                image: greenCycle,
                imageAlt: "image of greencycle a recycling mobile app",
        },
];
---

<section
        id="projects"
        class="projects-section"
        aria-labelledby="projects-title"
        itemtype="https://schema.org/ItemList"
        itemscope
>
        <h1 id="projects-title" class="section-title" itemprop="name">
                Projects
        </h1>
        <p class="section-intro">
                Selected personal, academic & internship work. Each emphasizes
                learning, maintainability & real user value.
        </p>
        <ul class="projects-grid" role="list">
                {projects.map((p, i) => <ProjectCard project={p} index={i} />)}
        </ul>
</section>

<style>
        .projects-section {
                width: 100%;
                display: flex;
                flex-direction: column;
                align-items: center;
                padding: 4rem 1.25rem 5rem;
                gap: 2.5rem;
                margin-top: 8vh;
        }
        .section-title {
                font-size: clamp(2.4rem, 4.5vw, 3.4rem);
                letter-spacing: 1px;
                font-weight: 600;
                margin: 0;
                text-align: center;
                /* perf hint for animation */
                will-change: filter, opacity, transform;
        }
        .section-intro {
                max-width: 860px;
                font-size: 1.05rem;
                line-height: 1.7;
                text-align: center;
                margin: 0;
                color: var(--color-text-secondary);
                /* perf hint for animation */
                will-change: filter, opacity, transform;
        }
        .projects-grid {
                --min: clamp(340px, 40vw, 560px);
                --gap: 2.2rem;
                list-style: none;
                padding: 0;
                margin: 0;
                width: min(1500px, 90%);
                display: grid;
                grid-template-columns: repeat(
                        auto-fill,
                        minmax(var(--min), 1fr)
                );
                gap: var(--gap);
        }

        .reveal {
                opacity: 0;
                transform: translateY(16px);
                filter: blur(10px);
                transition:
                        opacity 400ms ease,
                        transform 400ms ease,
                        filter 400ms ease;
                will-change: opacity, transform, filter;
        }
        .reveal.is-visible {
                opacity: 1;
                transform: translateY(0);
                filter: blur(0);
        }
        @media (prefers-reduced-motion: reduce) {
                .reveal,
                .reveal.is-visible {
                        transition: none;
                        filter: none;
                        transform: none;
                        opacity: 1;
                }
        }
</style>
<script>
        import { gsap } from "gsap";
        import { ScrollTrigger } from "gsap/ScrollTrigger";

        if (typeof window !== "undefined") {
                const prefersReduced = window.matchMedia(
                        "(prefers-reduced-motion: reduce)"
                ).matches;

                if (!prefersReduced) {
                        gsap.registerPlugin(ScrollTrigger);

                        const init = () => {
                                const section =
                                        document.querySelector("#projects");
                                if (!section) return;

                                const title =
                                        section.querySelector(".section-title");
                                const intro =
                                        section.querySelector(".section-intro");
                                const cards =
                                        section.querySelectorAll(
                                                ".project-card"
                                        );

                                if (title) {
                                        gsap.fromTo(
                                                title,
                                                {
                                                        filter: "blur(6px)",
                                                        opacity: 0,
                                                        y: 14,
                                                },
                                                {
                                                        filter: "blur(0px)",
                                                        opacity: 1,
                                                        y: 0,
                                                        duration: 0.6,
                                                        ease: "power2.out",
                                                        scrollTrigger: {
                                                                trigger: title,
                                                                start: "top 75%",
                                                                end: "top 60%",
                                                                scrub: true,
                                                        },
                                                }
                                        );
                                }

                                if (intro) {
                                        gsap.fromTo(
                                                intro,
                                                {
                                                        filter: "blur(8px)",
                                                        opacity: 0,
                                                        y: 18,
                                                },
                                                {
                                                        filter: "blur(0px)",
                                                        opacity: 1,
                                                        y: 0,
                                                        duration: 0.6,
                                                        ease: "power2.out",
                                                        scrollTrigger: {
                                                                trigger: intro,
                                                                start: "top 85%",
                                                                end: "top 60%",
                                                                scrub: true,
                                                        },
                                                }
                                        );
                                }

                                if (cards.length) {
                                        // initial hint for smoother anims
                                        gsap.set(cards, {
                                                willChange: "filter, opacity, transform",
                                        });

                                        ScrollTrigger.batch(cards, {
                                                start: "top 90%",
                                                end: "top 60%",
                                                once: true,
                                                onEnter: (batch) => {
                                                        gsap.fromTo(
                                                                batch,
                                                                {
                                                                        opacity: 0,
                                                                        y: 24,
                                                                        filter: "blur(10px)",
                                                                },
                                                                {
                                                                        opacity: 1,
                                                                        y: 0,
                                                                        filter: "blur(0px)",
                                                                        duration: 0.5,
                                                                        ease: "power2.out",
                                                                        stagger: {
                                                                                each: 0.12,
                                                                                from: "start",
                                                                        },
                                                                }
                                                        );
                                                },
                                        });
                                }
                        };

                        // run after layout; refresh on load to ensure correct measurements
                        requestAnimationFrame(() => {
                                init();
                                window.addEventListener("load", () =>
                                        ScrollTrigger.refresh()
                                );
                        });
                }
        }
</script>
